#include<stdio.h>
#include<stdlib.h>
#define MAXVERTICES 50
#define MALLOC(p,s)\
        if(!(p=malloc(s)))\
        {\
           printf("Malloc Unsuccessfull\n");\
           exit(0);\
        }
struct node
{
   int vertex;
   struct node *link;
};
typedef struct node nd;
nd *a[MAXVERTICES]={0};
int n;
void createAL()
{
   FILE *fp;
   int noofnodes,i,j;
   nd *t,*r;
   fp = fopen("DATASET","r");
   fscanf(fp,"%d",&n);
   
   for(i=0;i<n;i++)
   {
      fscanf(fp,"%d",&noofnodes);
      r=0;
      if(noofnodes==0)
         a[i]=0;
      
      for(j=0;j<noofnodes;j++)
      {
         MALLOC(t,sizeof(nd));
         t->link=0;
         fscanf(fp,"%d",&(t->vertex));
         
         if(a[i]==0)
            a[i]=t;
         else
            r->link=t;
         r=t;
      }   
   }
}
void displayAL()
{
   int i;
   nd *t;
   for(i=0,t=a[i];i<n;i++)
   {
      t=a[i];
      printf("Vertex %d \n",i);
      for(;t;t=t->link)
         printf("%d ",t->vertex);
      printf("\n");
   }
}

#define TRUE 1
#define FALSE 0

short int visited[MAXVERTICES]={FALSE};

void DFS(int v)
{
   nd *w;
   visited[v] = TRUE;
   printf("%d ",v);
   for(w=a[v];w;w=w->link)
     if(!visited[w->vertex])
        DFS(w->vertex);
}

int f=0,r=-1;
int q[MAXVERTICES];
void addq(int v)
{
   q[++r]=v;
}
int deleteq()
{
   return q[f++];
}

void BFS(int v)
{
   nd *w;
   int i;
   for(i=0;i<MAXVERTICES;i++)
     visited[i]=FALSE;
   printf("%d ",v);
   visited[v]=TRUE;
   
   addq(v);
   while(r>=f)
   {
      v=deleteq();
      for(w=a[v];w;w=w->link)
         if(!visited[w->vertex])
         {
            printf("%d ",w->vertex);
            addq(w->vertex);
            visited[w->vertex]=TRUE;
         }
   }
   printf("\n");
}
int main()
{
   createAL();
   displayAL();
   printf("DEPTH FIRST SEARCH\n");
   DFS(0);
   printf("\nBREADTH FIRST SEARCH\n");
   BFS(0);
   return 0;
}

/*
DATASET
8
2
1 2
3
0 3 4
3
0 5 6
2
1 7
2
1 7
2
2 7
2
2 7
4
3 4 5 6
*/
